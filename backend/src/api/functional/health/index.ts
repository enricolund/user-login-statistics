/**
 * @packageDocumentation
 * @module api.functional.health
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IHealthStatus } from "../../../services/health-check.service";

/**
 * @controller HealthCheckController.getHealth
 * @path GET /health
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getHealth(
  connection: IConnection,
): Promise<getHealth.Output> {
  return true === connection.simulate
    ? getHealth.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getHealth.METADATA,
        template: getHealth.METADATA.path,
        path: getHealth.path(),
      });
}
export namespace getHealth {
  export type Output = IHealthStatus;

  export const METADATA = {
    method: "GET",
    path: "/health",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/health";
  export const random = (): IHealthStatus => typia.random<IHealthStatus>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
