/**
 * @packageDocumentation
 * @module api.functional.logins.fake
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IUserLogin } from "../../../../dto/user-login.dto";

/**
 * @controller UserLoginController.generateFakeUserLoginData
 * @path POST /logins/fake
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function generateFakeUserLoginData(
  connection: IConnection,
): Promise<generateFakeUserLoginData.Output> {
  return true === connection.simulate
    ? generateFakeUserLoginData.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...generateFakeUserLoginData.METADATA,
        template: generateFakeUserLoginData.METADATA.path,
        path: generateFakeUserLoginData.path(),
      });
}
export namespace generateFakeUserLoginData {
  export type Output = Array<IUserLogin>;

  export const METADATA = {
    method: "POST",
    path: "/logins/fake",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/logins/fake";
  export const random = (): Array<IUserLogin> =>
    typia.random<Array<IUserLogin>>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
