/**
 * @packageDocumentation
 * @module api.functional.logins.cache_status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * @controller UserLoginController.getCacheStatus
 * @path GET /logins/cache-status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCacheStatus(
  connection: IConnection,
): Promise<getCacheStatus.Output> {
  return true === connection.simulate
    ? getCacheStatus.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getCacheStatus.METADATA,
        template: getCacheStatus.METADATA.path,
        path: getCacheStatus.path(),
      });
}
export namespace getCacheStatus {
  export type Output = {
    isCached: boolean;
    lastUpdated: Date | null;
    isExpired: boolean;
    cacheAgeMs: number | null;
  };

  export const METADATA = {
    method: "GET",
    path: "/logins/cache-status",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/logins/cache-status";
  export const random = (): {
    isCached: boolean;
    lastUpdated: Date | null;
    isExpired: boolean;
    cacheAgeMs: number | null;
  } =>
    typia.random<{
      isCached: boolean;
      lastUpdated: Date | null;
      isExpired: boolean;
      cacheAgeMs: number | null;
    }>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
