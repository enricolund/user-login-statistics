/**
 * @packageDocumentation
 * @module api.functional.logins.stats
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * @controller UserLoginController.getStats
 * @path GET /logins/stats
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getStats(
  connection: IConnection,
): Promise<getStats.Output> {
  return true === connection.simulate
    ? getStats.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getStats.METADATA,
        template: getStats.METADATA.path,
        path: getStats.path(),
      });
}
export namespace getStats {
  export type Output = {
    totalSessions: number;
    totalUsers: number;
    averageSessionDuration: number;
    deviceStats: { device_type: string; count: number }[];
    regionStats: { region: string; count: number }[];
    browserStats: { browser: string; count: number }[];
  };

  export const METADATA = {
    method: "GET",
    path: "/logins/stats",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/logins/stats";
  export const random = (): {
    totalSessions: number;
    totalUsers: number;
    averageSessionDuration: number;
    deviceStats: { device_type: string; count: number }[];
    regionStats: { region: string; count: number }[];
    browserStats: { browser: string; count: number }[];
  } =>
    typia.random<{
      totalSessions: number;
      totalUsers: number;
      averageSessionDuration: number;
      deviceStats: { device_type: string; count: number }[];
      regionStats: { region: string; count: number }[];
      browserStats: { browser: string; count: number }[];
    }>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
