/**
 * @packageDocumentation
 * @module api.functional.logins
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IUserLogin } from "../../../dto/user-login.dto";

export * as fake from "./fake";
export * as cache_status from "./cache_status";
export * as stats from "./stats";
export * as trigger_update from "./trigger_update";

/**
 * @controller UserLoginController.findAll
 * @path GET /logins
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return true === connection.simulate
    ? findAll.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...findAll.METADATA,
        template: findAll.METADATA.path,
        path: findAll.path(),
      });
}
export namespace findAll {
  export type Output = Array<IUserLogin>;

  export const METADATA = {
    method: "GET",
    path: "/logins",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/logins";
  export const random = (): Array<IUserLogin> =>
    typia.random<Array<IUserLogin>>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}

/**
 * @controller UserLoginController.createLogin
 * @path POST /logins
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createLogin(
  connection: IConnection,
  props: createLogin.Props,
): Promise<createLogin.Output> {
  return true === connection.simulate
    ? createLogin.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createLogin.METADATA,
          template: createLogin.METADATA.path,
          path: createLogin.path(),
        },
        props.data,
      );
}
export namespace createLogin {
  export type Props = {
    data: Body;
  };
  export type Body = IUserLogin.ICreate;
  export type Output = IUserLogin;

  export const METADATA = {
    method: "POST",
    path: "/logins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/logins";
  export const random = (): IUserLogin => typia.random<IUserLogin>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.data));
    return random();
  };
}
